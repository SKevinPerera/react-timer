{"version":3,"sources":["components/Timer.js","components/DisplayUnit.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","id","timerOn","timerStart","timerTime","count","increment","temp1","temp2","incrementText","startTimer","runOnce","setState","Date","now","timer","setInterval","console","log","onDataReset","stopTimer","clearInterval","resetTimer","this","centiseconds","Math","floor","slice","seconds","minutes","hours","className","onClick","React","Component","DisplayUnit","el","oldCount","newCount","total","handleDataReset","county","idy","miliseconds","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+MA2GeA,E,kDAzFb,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAbVC,MAAQ,CACNC,GAAG,EACHC,SAAS,EACTC,WAAY,EACZC,UAAW,EACXC,MAAO,EACPC,UAAU,EACVC,MAAM,EACNC,MAAM,EACNC,cAAc,IAGG,EAUnBC,WAAa,WAEa,IAArB,EAAKV,MAAMO,OAEV,EAAKI,UAGT,EAAKC,SAAS,CACZV,SAAS,EACTE,UAAW,EAAKJ,MAAMI,UACtBD,WAAYU,KAAKC,MAAQ,EAAKd,MAAMI,YAEtC,EAAKW,MAAQC,aAAY,WACvB,EAAKJ,SAAS,CACZR,UAAWS,KAAKC,MAAQ,EAAKd,MAAMG,aAErCc,QAAQC,IAAI,gCAAgC,EAAKlB,MAAMO,MAAM,+BAA+B,EAAKP,MAAMQ,OAEnG,EAAKR,MAAMO,MAAQ,EAAKP,MAAMI,WAAe,EAAKJ,MAAMQ,MAAQ,EAAKR,MAAMI,YAC3E,EAAKL,MAAMoB,YAAY,EAAKnB,MAAMI,UAAU,EAAKJ,MAAMC,IACvD,EAAKD,MAAMQ,OAAS,EAAKR,MAAMM,UAC/B,EAAKN,MAAMO,MAAQ,EAAKP,MAAMQ,MAAM,IACpCS,QAAQC,IAAI,oBAAoB,EAAKlB,MAAMI,UAAW,eAAe,EAAKJ,MAAMM,cAEnF,KAlCc,EAqCnBc,UAAY,WACV,EAAKR,SAAS,CAAEV,SAAS,IACzBmB,cAAc,EAAKN,QAvCF,EA0CnBO,WAAa,WACX,EAAKV,SAAS,CACZT,WAAY,EACZC,UAAW,EACXG,MAAO,EACPC,MAAO,IAET,EAAKT,MAAMoB,YAAY,EAAE,EAAKnB,MAAMC,KA/ClC,EAAKD,MAAL,2BAAkB,EAAKA,OAAUD,GAFlB,E,sDAMbwB,KAAKvB,MAAMO,MAAQgB,KAAKvB,MAAMM,UAAU,IACxCiB,KAAKvB,MAAMQ,MAAQe,KAAKvB,MAAMM,Y,+BA6C1B,IACAF,EAAcmB,KAAKvB,MAAnBI,UACJoB,GAAgB,IAAOC,KAAKC,MAAMtB,EAAY,IAAM,KAAMuB,OAAO,GACjEC,GAAW,IAAOH,KAAKC,MAAMtB,EAAY,KAAQ,IAAKuB,OAAO,GAC7DE,GAAW,IAAOJ,KAAKC,MAAMtB,EAAY,KAAS,IAAKuB,OAAO,GAC9DG,GAAS,IAAML,KAAKC,MAAMtB,EAAY,OAAUuB,OAAO,GAE3D,OACE,yBAAKI,UAAU,mBACb,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBAAf,eAA+CR,KAAKvB,MAAMC,IAC1D,yBAAK8B,UAAU,qBACdD,EADD,MACWD,EADX,MACuBD,EADvB,MACmCJ,IAEX,IAAvBD,KAAKvB,MAAME,SAA8C,IAAzBqB,KAAKvB,MAAMI,WAC5C,4BAAQ4B,QAAST,KAAKb,YAAtB,UAEwB,IAAvBa,KAAKvB,MAAME,SACZ,4BAAQ8B,QAAST,KAAKH,WAAtB,SAEwB,IAAvBG,KAAKvB,MAAME,SAAqBqB,KAAKvB,MAAMI,UAAY,GACxD,4BAAQ4B,QAAST,KAAKb,YAAtB,WAEwB,IAAvBa,KAAKvB,MAAME,SAAqBqB,KAAKvB,MAAMI,UAAY,GACxD,4BAAQ4B,QAAST,KAAKD,YAAtB,UAGJ,yBAAKS,UAAU,aACX,2BAAOA,UAAU,QAAjB,6BAC+BR,KAAKvB,MAAMC,GAD1C,wCACmFsB,KAAKvB,MAAMS,qB,GA/FtFwB,IAAMC,WCgDXC,E,4MAhDXnC,MAAQ,CACNK,MAAM,EACNJ,GAAG,EACHmC,GAAG,EACHC,SAAS,EACTC,SAAS,EACTC,MAAM,G,EAGRC,gBAAkB,SAACC,EAAOC,GACxBzB,QAAQC,IAAI,cAAcuB,EAAO,WAAWC,GAE5C,EAAK9B,SAAU,CACbwB,GAAIK,EACJxC,GAAGyC,K,uDAKP,IAAIC,GAAe,IAAOlB,KAAKC,MAAMH,KAAKvB,MAAMoC,GAAK,IAAM,KAAMT,OAAO,GACpEC,GAAW,IAAOH,KAAKC,MAAMH,KAAKvB,MAAMoC,GAAK,KAAQ,IAAKT,OAAO,GACjEE,GAAW,IAAOJ,KAAKC,MAAMH,KAAKvB,MAAMoC,GAAK,KAAS,IAAKT,OAAO,GAClEG,GAAS,IAAML,KAAKC,MAAMH,KAAKvB,MAAMoC,GAAK,OAAUT,OAAO,GAE/D,OACI,6BACI,yBAAKI,UAAU,gBACb,+BAAO,kEAIT,6BACE,kBAAC,EAAD,CAAOZ,YAAaI,KAAKiB,gBAAiBvC,GAAI,EAAGK,UAAW,IAAOG,cAAe,eAClF,kBAAC,EAAD,CAAOU,YAAaI,KAAKiB,gBAAiBvC,GAAI,EAAGK,UAAW,IAAMG,cAAe,cACjF,kBAAC,EAAD,CAAOU,YAAaI,KAAKiB,gBAAiBvC,GAAI,EAAGK,UAAW,IAAKG,cAAe,iBAInF,yBAAKsB,UAAU,iBACZ,uDACwBD,EADxB,MACkCD,EADlC,MAC8CD,EAD9C,MAC0De,S,GAzC9CV,IAAMC,WCSjBU,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.6c288d91.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './../App.css';\r\n\r\n\r\nclass Timer extends React.Component {\r\n\r\n  state = {\r\n    id:0,\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerTime: 0,\r\n    count: 0,\r\n    increment:0,\r\n    temp1:0,\r\n    temp2:0,\r\n    incrementText:''\r\n  };\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = { ...this.state, ...props };\r\n    }\r\n\r\n    runOnce() {\r\n        this.state.temp1 = this.state.increment-100;\r\n        this.state.temp2 = this.state.increment;\r\n    }\r\n\r\n  startTimer = () => {   \r\n    \r\n    if(this.state.temp1 === 0)\r\n    {\r\n        this.runOnce();\r\n    }\r\n    \r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart\r\n      });\r\n      console.log(\"Lower level of increment =>s \"+this.state.temp1+\" High level of Increment => \"+this.state.temp2);\r\n\r\n      if((this.state.temp1 < this.state.timerTime) && (this.state.temp2 > this.state.timerTime )){\r\n          this.props.onDataReset(this.state.timerTime,this.state.id);\r\n          this.state.temp2 += this.state.increment;\r\n          this.state.temp1 = this.state.temp2-100;\r\n          console.log(\"Level Matched => \"+this.state.timerTime+ \" Increment :\"+this.state.increment);\r\n      }\r\n    }, 10);\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ timerOn: false });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: 0,\r\n      timerTime: 0,\r\n      temp1: 0,\r\n      temp2: 0\r\n    });\r\n    this.props.onDataReset(0,this.state.id)\r\n  };\r\n\r\n  render() {\r\n    const { timerTime } = this.state;\r\n    let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\r\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\r\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\r\n\r\n    return (\r\n      <div className=\"divider-content\">\r\n        <div className=\"Stopwatch\">\r\n            <div className=\"Stopwatch-header\">STOPWATCH : {this.state.id}</div>\r\n            <div className=\"Stopwatch-display\">\r\n            {hours} : {minutes} : {seconds} : {centiseconds}\r\n            </div>\r\n            {this.state.timerOn === false && this.state.timerTime === 0 && (\r\n            <button onClick={this.startTimer}>Start</button>\r\n            )}\r\n            {this.state.timerOn === true && (\r\n            <button onClick={this.stopTimer}>Stop</button>\r\n            )}\r\n            {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n            <button onClick={this.startTimer}>Resume</button>\r\n            )}\r\n            {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n            <button onClick={this.resetTimer}>Reset</button>\r\n            )}\r\n        </div>\r\n        <div className=\"user-info\">\r\n            <label className=\"info\">\r\n                THIS STOPWATCH WHICH ID : {this.state.id}, WILL BE INCREMENT ONLY ON EVERY => {this.state.incrementText}\r\n            </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport Timer from './Timer';\r\n\r\nclass DisplayUnit extends React.Component {\r\n    state = {\r\n      count:0,\r\n      id:0,\r\n      el:0,\r\n      oldCount:0,\r\n      newCount:0,\r\n      total:0\r\n    };\r\n\r\n    handleDataReset = (county,idy) => {\r\n      console.log(\"In pram => \"+county+\" id = > \"+idy);\r\n\r\n      this.setState ({\r\n        el: county,\r\n        id:idy\r\n      });\r\n    }\r\n\r\nrender(){\r\n    let miliseconds = (\"0\" + (Math.floor(this.state.el / 10) % 100)).slice(-2);\r\n    let seconds = (\"0\" + (Math.floor(this.state.el / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(this.state.el / 60000) % 60)).slice(-2);\r\n    let hours = (\"0\" + Math.floor(this.state.el / 3600000)).slice(-2);\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"header-label\">\r\n              <label><b>CODING CHALLENGE : KEVIN PERERA *</b></label>\r\n            </div>\r\n            \r\n            {/* increment refers when to update the timer */}\r\n            <div>\r\n              <Timer onDataReset={this.handleDataReset} id={1} increment={10000} incrementText={'10 seconds'}/>\r\n              <Timer onDataReset={this.handleDataReset} id={2} increment={1000} incrementText={'1 seconds'}/>\r\n              <Timer onDataReset={this.handleDataReset} id={3} increment={100} incrementText={'0.1 seconds'}/>\r\n            </div>\r\n\r\n          {/* label to display total Escaped Time */}\r\n           <div className=\"counter-label\">\r\n              <label>\r\n                Total Time Escaped : {hours} : {minutes} : {seconds} : {miliseconds}\r\n              </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default DisplayUnit;","import React from 'react';\nimport './App.css';\nimport DisplayUnit from './components/DisplayUnit';\n\nfunction App() {\n  return (\n    <div>\n      <DisplayUnit/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}